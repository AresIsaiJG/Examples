/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
#include "GPIO.hpp"

GPIO_Conf::GPIO_ConfigStruct GPIOB14_Conf =
{
		.Pin	= GPIO_Conf::Pin_EnumClass::Pin14,
		.AF		= GPIO_Conf::AF_EnumClass::NotUse,
		.Mode	= GPIO_Conf::Mode_EnumClass::Mode_Output,
		.OType	= GPIO_Conf::OType_EnumClass::Mode_PushPull,
		.Pull	= GPIO_Conf::UpDown_EnumClass::Mode_PullUp,
		.Speed	= GPIO_Conf::Speed_EnumClass::Mode_MedSpeed
};

GPIO_Conf::GPIO_ConfigStruct GPIOB7_Conf =
{
		.Pin	= GPIO_Conf::Pin_EnumClass::Pin7,
		.AF		= GPIO_Conf::AF_EnumClass::NotUse,
		.Mode	= GPIO_Conf::Mode_EnumClass::Mode_Output,
		.OType	= GPIO_Conf::OType_EnumClass::Mode_PushPull,
		.Pull	= GPIO_Conf::UpDown_EnumClass::Mode_PullUp,
		.Speed	= GPIO_Conf::Speed_EnumClass::Mode_MedSpeed
};

GPIO_Conf::GPIO_ConfigStruct GPIOB0_Conf =
{
		.Pin	= GPIO_Conf::Pin_EnumClass::Pin0,
		.AF		= GPIO_Conf::AF_EnumClass::NotUse,
		.Mode	= GPIO_Conf::Mode_EnumClass::Mode_Output,
		.OType	= GPIO_Conf::OType_EnumClass::Mode_PushPull,
		.Pull	= GPIO_Conf::UpDown_EnumClass::Mode_PullUp,
		.Speed	= GPIO_Conf::Speed_EnumClass::Mode_MedSpeed
};

RCC_Conf::RCC_EnConfigStruct AHB1Clock =
{
		.AHB1_En = static_cast< uint8_t >(RCC_Conf::AHB1_EnumClass::GPIOB_Clk)
};

static constexpr std::uintptr_t RCC_BASE = 0x40023800;
static constexpr std::uintptr_t GPIOB_BASE = 0x40020400;

using RCC	= AHB1Peripheral::RCC<RCC_BASE>;
using GPIOB = AHB1Peripheral::GPIO<GPIOB_BASE>;

int main(void)
{
	RCC::AHB1_ClockEnable(AHB1Clock);
	volatile uint16_t i = 1000;
	while(i)
		i--;
	GPIOB::GPIO_Config(GPIOB0_Conf);
	GPIOB::GPIO_Config(GPIOB14_Conf);
	GPIOB::GPIO_Config(GPIOB7_Conf);

	GPIOB::GPIO_WriteAtomic(GPIOB0_Conf);
	GPIOB::GPIO_WriteAtomic(GPIOB7_Conf);
	GPIOB::GPIO_WriteAtomic(GPIOB14_Conf);
	/* Loop forever */
	while(1);
}
